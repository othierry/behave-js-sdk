{"name":"Behave-js-sdk","tagline":"Behave Javascript SDK","body":"# Introduction\r\n\r\nOur JavaScript library lets you easily identify your users, track their behaviours, handle rewards and make full use of the API.\r\n\r\n0. [Getting started](#getting-started)\r\n  * [Initializing the SDK](#initializing-the-sdk)\r\n1. [Players](#players)\r\n  * [Identify](#identify)\r\n2. [Behaviours](#behaviours)\r\n  * [Simple tracking](#simple-tracking)\r\n  * [Contextual tracking](#contextual-tracking)\r\n  * [Using the tracking response](#using-the-tracking-response)\r\n3. [Leaderboards](#leaderboards)\r\n  * [Getting leaderboard results](#getting-leaderboard-current-results)\r\n  * [Getting leaderboard results for the currently identified player](#getting-leaderboard-results-for-the-currently-identified-player)\r\n4. [Badges](#badges)\r\n  * [Getting unlocked badges of the currently identified player](#getting-unlocked-badges-of-the-currently-identified-player)\r\n  * [Getting locked badges of the currently identified player](#getting-locked-badges-of-the-currently-identified-player)\r\n5. [Events](#events)\r\n  * [Realtime SDK events](#realtime-sdk-events)\r\n  * [Subscribing to an event](#subscribing-to-an-event)\r\n  * [Unsubscribing to an event](#unsubscribing-to-an-event)\r\n\r\n## Getting started\r\n\r\n### Initializing the SDK\r\n\r\nBefore starting to do anything, you need to initialize the SDK with a valid API access token.\r\nYou can find the API token <a href=\"http://dashboard.behave.io/#/settings\" target=\"_blank\">from your dashboard in your app settings</a>.\r\n\r\nWithin the `<head></head>` tag insert the following code to load the library\r\n\r\n```javascript\r\n<!-- OPTIONAL but make sure you are including jQuery in your project -->\r\n<script src=\"//cdnjs.cloudflare.com/ajax/libs/jquery/2.1.1/jquery.min.js\"></script>\r\n\r\n<!-- Behave JS SDK -->\r\n<script src=\"//d2xjmhu9gtl3es.cloudfront.net/libs/js/1.1.0/behave.js\"></script>\r\n<!-- Behave CSS -->\r\n<script src=\"//d2xjmhu9gtl3es.cloudfront.net/libs/js/1.1.0/behave.css\"></script>\r\n```\r\n\r\nIn the `<body></body>` tag, insert the code and replace *YOUR_API_TOKEN* by your API Token.\r\n\r\n```javascript\r\n<script>\r\n  behave.init('YOUR_API_TOKEN');\r\n</script>\r\n```\r\n\r\n## Players\r\n\r\n### Identify\r\n\r\nYou need to identify your users at least once so their player profiles can be created. You can optionally attribute some traits to the player than you can update/retrieve at any time.\r\n\r\n**Note:** If you start tracking behaviours of a player that you have not yet identified using `identify()`, it will be automatically anonymously identified for you. An anonymous player act as a normal player but is **temporary** and is binded to the user's session. Once you can `identify()` the player, it will be converted to a regular player automatically.\r\n\r\n* **Method:** behave.identify(referenceId, [traits], [callback])\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| ------:|\r\n| referenceId  | String | **(Required)** The id of the player in YOUR database |\r\n| traits        | Object | (optional) The custom traits you assign to the player. You can use any key-value pair to give attributes to the player. The 2 special fields: ``name`` and ``picture`` will be used as display information from the admin interface. We recommend to specify them if you can.  |\r\n\r\nExample:\r\n\r\n```javascript\r\nbehave.identify('42', {\r\n  email   : 'olivier@behave.io',\r\n  name    : 'Olivier Thierry',\r\n  picture : 'http://url_to_picture',\r\n  foo     : 'bar'  \r\n});\r\n```\r\n\r\nThe identified Player can be retrieved using `behave.player` and has the following attributes.\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| ------:|\r\n| _id           | String | The id of the Player |\r\n| reference_id  | String | The custom unique id you have specified to identify this player |\r\n| points        | Number | The number of points of the player (default to 0) |\r\n| level         | Object | The current level of the player (and its progress), null otherwise. |\r\n| traits        | Object | The custom traits you have given to the player |\r\n\r\n**NOTE:** The player will load asynchronously so calling `behave.player` right after `behave.identify()` will be the right player but its points, level and traits may not have loaded yet. Your app can easily listen to events to have control when the player has been fully identified and more. Please refer to [Events](#events) for more information.\r\n\r\n## Behaviours\r\n\r\nYou need to track your players behaviours if you want to reward them for doing so! Tracking can be either **simple** or **contextual**. You can specify ANY key value pairs to describe the context to which the behaviour was taken (See examples below):\r\n\r\n* **Method:** behave.track(verb, [context], [callback])\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n| verb      | String | **(Required)** The name of the behaviour you are tracking  |\r\n| context      | Object | (optional) You can specify ANY key value pairs to describe the context to which the behaviour was taken. Optionally, A special field ``timestamp`` **(unix timestamp)** defines when was this behaviour taken. **Make sure you specify a timestamp when importing data**. We will use the server's current time by default. |\r\n\r\n**NOTE:** Your app can easily listen to reward events to have control when the player has earned points, unlocked badges and more. Please refer to [Events](#events) for more information.\r\n\r\n### Simple tracking\r\n\r\n```javascript\r\nbehave.track('login');\r\n```\r\n\r\n### Contextual tracking\r\n\r\n```javascript\r\nbehave.track('check-in', {\r\n  placeId: 24,\r\n  withFriends: [1,4,12,435]\r\n});\r\n```\r\n\r\n### Using the tracking response\r\n\r\nWhen you track a user behaviour, you get back a response of basically what happened. The response contains the actions that the tracking has triggered (from your [recipes](http://dashboard.behave.io/recipes)).\r\n\r\nThe response **always contains 4 attributes**.\r\n\r\n| Name          | Type          | Value  |\r\n| ------------- |:-------------:| -----:|\r\n| badges         | Array[Object] | The unlocked badges |\r\n| points        | Object | With 2 attributes: ``earned`` and ``balance``. ``earned`` is the number of points the user earned by taking the action or 0 if no points earned, ``balance`` is the updated balance of the player points |\r\n| level         | Object | The current level of the player, null otherwise. |\r\n| leaderboards  | Array[Object] |  Leaderboard updates (if any,  empty otherwise). See bellow for detailed structure |\r\n\r\nBehave SDK will publish events when player is identified, when badges are unlocked, when a level is reached and more. Refer to [Events](#events) for more information\r\n\r\nExample:\r\n\r\n```javascript\r\nbehave.track('check-in', {\r\n  playerId: 42,\r\n  placeName: 'Deloitte',\r\n  withMates: [4,12]\r\n}, function(err, results) {\r\n  // Use results here\r\n});\r\n```\r\n\r\nExample accessing ``results.points`` attribute.\r\n\r\n```javascript\r\n> results.points\r\n{ \r\n  // The number of points the user earned by taking the action\r\n  'earned'  => 0, \r\n\r\n  // The player's updated balance including the points he just earned\r\n  'balance' => 840\r\n}\r\n```\r\n\r\nIf not empty ``results.badges`` contains the Badges that the user has just unlocked. The structure looks like this:\r\n\r\n```javascript\r\n> results.badges\r\n[\r\n  {\r\n    // Reward id\r\n    _id : \"52a01b67cc7df72c79000003\",\r\n    // Number of times this reward was earned by this player\r\n    count : 1,\r\n    // Badge definition\r\n    badge : {\r\n      // Badge id\r\n      _id           : \"529fff2356ce248366000006\",\r\n      // Badge custom id you have defined, null otherwise\r\n      reference_id  : \"deloitte-newbie-badge\",\r\n      // badge name\r\n      name          : \"Deloitte Newbie\",\r\n      // badge hint\r\n      hint          : \"Check-in 2 times at Deloitte\",\r\n      // badge unlock message\r\n      message       : \"Whooa! Look like you are new in da place. keep the effort and you will be rewarded.\"\r\n    }\r\n  ]\r\n```\r\n\r\nIf not empty, ``results.leaderboards`` will contain something like this\r\n\r\n```javascript\r\n> results.leaderboards\r\n[\r\n  {\r\n     // The updated leaderboard\r\n     leaderboard : {\r\n        _id : '529fff1156ce248366000006',\r\n        reference_id : 'test-lb'\r\n     },\r\n     // Player's position before the update\r\n     prev_position    : 5,\r\n     // Player's position after the update\r\n     post_position    : 2,\r\n     // Player's updated score\r\n     score            : 435,\r\n   }\r\n]\r\n}\r\n```\r\n\r\nIf not null (leveling system active and valid), ``results.level`` will contain the current level of the player and its progression.\r\n\r\n```javascript\r\n> results.level\r\n[\r\n  {\r\n    // Level name\r\n    name: 'Newbie',\r\n    // Message associated to the level\r\n    message: 'You are ...'\r\n    // Level progress (/100)\r\n    progress: 28,\r\n    // How many points required to reach next level\r\n    nextLevelPoints: '42'\r\n    // Level icon\r\n    name: 'https://url-to-lvl-icon',\r\n   }\r\n]\r\n}\r\n```\r\n\r\n## Leaderboards\r\n\r\n**Note:** If you want to test you leaderboard results, you can directly use [the built-in simulator](http://dashboard.behave.io/#/simulator) to test API calls.\r\n\r\n### Getting leaderboard current results\r\n\r\nYou can fetch the actual results of any leaderboard at anytime. Here is an example:\r\n\r\n* **Method:** behave.fetchLeaderboardResults(leaderboardId, [options], [callbacl])\r\n* **Parameters:**\r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| leaderboardId | String | **(Required)** The reference_id or id of the leaderboard |\r\n| options | Object | **(Optional)** Result fetching options |\r\n\r\nExample\r\n\r\n```javascript\r\nbehave.fetchLeaderboardResults('points', { max: 500 }, function(err, results) {\r\n  // Use results\r\n});\r\n```\r\n\r\nAvailable options are:\r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| page          | Number        | (Optional) The results page to fetch. Default is 1|\r\n| limit         | Number        | (Optional) The max number of results per page. MAXIMUM is 1000 |\r\n| max           | Number        | (Optional) The maximum position to fetch, default is 0 => None |\r\n| player_id     | String | A player's reference_id (Optional). If specified, the given player will ALWAYS appear in the results (not duplicated). It is very useful if for example you want to always include the current player in the results |\r\n| players | Array[String] | (Optional) The players to include in the results, default is null => ALL |\r\n| positions     | String        | (Optional) The way positions are calculated. Possible values are `relative` and `absolute`. `relative` will set the positions according to the players that are included in the results, `absolute` will set the positions according to all the players in the leaderboards. This is useful when for example you want to fetch the results for a player and his friends only. In this situation you could pass `relative` so that the positions are computed between friends and not between all the players in the leaderboards. |\r\n| context     | Object        | (Optional) You can segment results according to a specific context. For example, on a leaderboard with ``all-time`` timeframe, if you want to get the results of weeks 42 only you could have ``{ timestamp: '>=1381701600,<1382306400' }``. You can also use any custom key you have specified in the context when tracking behaviours using ``track()``.  **On large leaderboards this can have an impact on performances.** |\r\nResults structure will look like this\r\n\r\n```javascript\r\n[\r\n  {\r\n    score : 129,\r\n    position : 1,\r\n    player : {\r\n      _id : \"529fe03ecbd86b9d6c000002\",\r\n      reference_id : '42',\r\n      traits :\r\n        name : 'Olivier Thierry',\r\n        email : 'olivier@behave.io'\r\n      },\r\n      identities : {\r\n         facebook : 12323\r\n      }\r\n    }\r\n  },\r\n  {\r\n    score : 102,\r\n    position : 2,\r\n    player : {\r\n      _id : \"947pg03ecbd86b9d6c05520\",\r\n      reference_id : '43',\r\n      traits : {\r\n        name : Olivier Jeandel',\r\n        email : 'jide@behave.io'\r\n      },\r\n      identities : {\r\n         facebook : 5435\r\n      }\r\n    }\r\n  }\r\n]\r\n```\r\n\r\n### Getting leaderboard results for the currently identified player\r\n\r\nYou can also fetch results for a particular player. Let's say you want to fetch the results of a player on one, many or even ALL the leaderboards **the player is in** then you can use this to do so.\r\n\r\n* **Method:** behave.player.fetchLeaderboardResults([options], callback)\r\n* **Parameters:** \r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| options  | Object | **(Optional)** Result fetching options  |\r\n\r\nAvailable options are:\r\n\r\n| Name          | Type          | Value      |\r\n| ------------- |:-------------:| ----------:|\r\n| leaderboards  | Array[String] | (Optional) Leaderboards to process, if empty all the leaderboards will be processed.  |\r\n| max           | Number        | (Optional) The maximum player position acceptance for the leaderboard to be selected.  |\r\n\r\nExample:\r\n\r\n```javascript\r\nbehave.player.fetchLeaderboardResults(function(err, results) {\r\n  // use results\r\n});\r\n\r\n// results will look like this\r\n[\r\n  {\r\n     \"leaderboard\" : {\r\n        \"_id\" : \"529fff1156ce248366000006\",\r\n        \"reference_id\" : \"leaderboard1\"\r\n     },\r\n     # Player's position\r\n     \"position\" : 2,\r\n     # Player's updated score\r\n     \"score\" : 435\r\n  },\r\n  {\r\n     \"leaderboard\" : {\r\n        \"_id\" : \"876fff1156ce248366000367\",\r\n        \"reference_id\" : \"leaderboard2\"\r\n     },\r\n     \"position\" : 18,\r\n     \"score\" : 114\r\n  }\r\n]\r\n```\r\n\r\nFor example, if I want to fetch all the leaderboard results for playerr where he/she is in the top 3:\r\n\r\n\r\n```javascript\r\nbehave.player.fetchLeaderboardResults({\r\n  max: 3\r\n}, function(err, results) {\r\n  // Use results\r\n});\r\n```\r\n\r\n### Iterating leaderboard results\r\n\r\n``behave.fetchLeaderboardResults()`` is enough when you want to fetch 1 page of 1000 entries maximum. If you want to iterate trough more results for a leaderboards you can use ``Behave::iterateLeaderboardResults()`` instead.\r\n\r\n* The **structure** is identical to ``behave.fetchLeaderboardResults()``\r\n* The **options** are identical to ``behave.fetchLeaderboardResults()``\r\n\r\nExample:\r\n\r\n```javascript\r\nbehave.iterateLeaderboardResults('points', { limit: 100 }, function(results, page) {\r\n  // Use the results (1 page of 100 max)\r\n}, function(err) {\r\n  // Completed! or error\r\n});\r\n```\r\n\r\n## Badges\r\n\r\n### Getting UNLOCKED badges of the currently identified player\r\n\r\n* **Method:** behave.player.fetchBadges(callback)\r\n\r\nExample:\r\n\r\n```javascript\r\nbehave.player.fetchBadges(function(err, badges) {\r\n  // Use badges\r\n});\r\n\r\n// Example Response\r\n[\r\n    {\r\n      // Reward id\r\n      \"_id\": \"530007cf0af9fbcf2d58e779\",\r\n\r\n      // Reward owner (the player)\r\n      \"player\": \"530006e4f27bfdb92dc3eac1\",\r\n\r\n      // Last time the badge was unlocked (unix timestamp)\r\n      \"lastUnlockedAt\": 1392510927,\r\n\r\n      // The number of times this badges has been unlocked by this player\r\n      \"count\": 1\r\n\r\n      // The reward's badge \r\n      \"badge\": {\r\n        // Badge id\r\n        \"_id\": \"52b83490739f878842000014\",\r\n        \r\n        // Is the badge active?\r\n        \"active\": true,\r\n\r\n        // Current app\r\n        \"app_id\": \"52b0f1d32e2ce4e91100000c\",\r\n\r\n        // Badge Hint\r\n        \"hint\": \"Trouvez 1 mot en moins de 7 secondes.\",\r\n\r\n        // Badge Icon\r\n        \"icon\": \"https://s3-eu-west-1.amazonaws.com/behave-production/uploads/9d05563b89934f615951bc6425f029e6.png\",\r\n\r\n        // The limit of unlocks that can be done (e.g limit of 10 means that maximum 10 players can unlock the badge)        \r\n        \"limit\": 0,\r\n\r\n        \"localization\": {\r\n          \"fr_FR\": {\r\n            \"message\": \"Moins de 7 secondes pour 1 mot est un challenge ! Bravo.\",\r\n            \"hint\": \"Trouvez 1 mot en moins de 7 secondes.\",\r\n            \"name\": \"Flash Gordon\",\r\n            \"is_default\": false\r\n          },\r\n          \"en_US\": {\r\n            \"is_default\": true\r\n          }\r\n        },\r\n\r\n        // Badge message (when unlocked)\r\n        \"message\": \"Vous l'avez fait ! Moins de 7 secondes pour 1 mot est un challenge ! Bravo.\",\r\n\r\n        // Badge name\r\n        \"name\": \"Flash Gordon\",\r\n\r\n        // Badge reference_id\r\n        \"reference_id\": \"flash-gordon\",\r\n\r\n        // Badge social bindings (OpenGraph) if enabled from the dashboard\r\n        \"social\": {\r\n          \"facebook\": {\r\n            \"ogType\": \"pics-n-words:badge\",\r\n            // Badge id in the facebook opengraph\r\n            \"ogId\": \"775995212414594\"\r\n          }\r\n        },\r\n\r\n        // Is the badge unique? (can be unlocked once per player)\r\n        \"unique\": true\r\n      }\r\n    },\r\n    // ...\r\n```\r\n\r\n### Getting LOCKED badges of the currently identified player\r\n\r\n* **Method:** behave.player.fetchLockedBadges(callbacl)\r\n\r\nExample:\r\n\r\n```javascript\r\nbehave.fetchLockedBadges(function(err, lockedBadges) {\r\n  // Use lockedBadges ...\r\n});\r\n\r\n// Example Response\r\n{\r\n  \"data\": [\r\n    {\r\n      // Badge id\r\n      \"_id\": \"52b838c8739f87884200001c\",\r\n\r\n      // Current app id\r\n      \"app_id\": \"52b0f1d32e2ce4e91100000c\",\r\n\r\n      // Badge Hint\r\n      \"hint\": \"Watch a video trailer in the shop\",\r\n\r\n      // Badge Icon\r\n      \"icon\": \"https://s3-eu-west-1.amazonaws.com/behave-production/uploads/6827c5d570dece337c123fcf9447abf7.png\",\r\n\r\n      // Badge message (when unlocked)\r\n      \"message\": \"Yeah! You like trailers and mobile games but do you like words?!\",\r\n\r\n      // Badge name\r\n      \"name\": \"Trailer lover\",\r\n\r\n      // Badge reference_id\r\n      \"reference_id\": \"trailer-lover\",\r\n\r\n      // Badge localizations (if enabled from the dashboard)\r\n      \"localization\": {\r\n        \"fr_FR\": {\r\n          \"message\": \"Vous aimez les vidéos et les apps mais aimez-vous les mots ?\",\r\n          \"hint\": \"Regardez une video depuis la boutique.\",\r\n          \"name\": \"Trailer lover\",\r\n          \"is_default\": false\r\n        },\r\n        \"en_US\": {\r\n          \"is_default\": true\r\n        }\r\n      },\r\n\r\n      // Badge social bindings (OpenGraph) if enabled from the dashboard\r\n      \"social\": {\r\n        \"facebook\": {\r\n          \"ogType\": \"pics-n-words:badge\",\r\n          // Badge id in the facebook opengraph\r\n          \"ogId\": \"1413403995564661\"\r\n        }\r\n      },\r\n\r\n      // Is the badge active?\r\n      \"active\": true,\r\n\r\n      // Is the badge unique? (can be unlocked once per player)\r\n      \"unique\": true,\r\n\r\n      // The limit of unlocks that can be done (e.g limit of 10 means that maximum 10 players can unlock the badge)\r\n      \"limit\": 0\r\n    },\r\n    // ...\r\n  ]\r\n}\r\n```\r\n\r\n## Events\r\n\r\n### Realtime SDK events\r\n\r\nThe JavaScript SDK publishes many events that your app can listen in order to update its state and the UI\r\n\r\n| Event name    | Description          |\r\n| ------------- |:-------------:|\r\n| player:identified | Published when the player is fully identified / when its traits have been updated |\r\n| reward:points | Called when the player has earned points. |\r\n| reward:badge | Called when the player has unlocked a badge. the badge object is passed as parameter to the handler |\r\n| reward:level | Called when the player levels up!. the level object is passed as parameter to the handler |\r\n\r\n### Subscribing to an event\r\n\r\n```javascript\r\nbehave.events.subscribe('reward:points', function(points) {\r\n  console.log('Earned: ', points.earned);\r\n  console.log('Balance: ', points.balance);\r\n});\r\n```\r\n\r\n### Unsubscribing from an event\r\n\r\n```javascript\r\nbehave.events.unubscribe('reward:points', handler);\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}